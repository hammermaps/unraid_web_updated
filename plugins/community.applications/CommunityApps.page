Menu="Apps"
Icon="community.applications.png"
Title="Community Applications"
Tag="users"
---
<?
###############################################################
#                                                             #
# Community Applications copyright 2015-2021, Andrew Zawadzki #
#                   Licenced under GPLv2                      #
#                                                             #
###############################################################

$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: "/usr/local/emhttp";
$plugin = "community.applications";

require_once "$docroot/plugins/$plugin/include/paths.php";
require_once "$docroot/plugins/$plugin/include/helpers.php";

// Restart logging over at start of every session
exec("rm -rf {$caPaths['CA_logs']}");
exec("mkdir -p {$caPaths['CA_logs']}");
$diagnosticsFile = htmlspecialchars(str_replace(' ','_',strtolower($var['NAME'])));

$cfg = parse_plugin_cfg($plugin);
if ( ! is_file($caPaths['warningAccepted']) ) {
	$firstRun = "true";
}
if ( ! is_file($caPaths['pluginWarning']) ) {
	$pluginWarning = "false";
}

if ( ! is_file($caPaths['docker_cfg']) ) {
	exec("logger -t 'Community Applications' 'Fatal Flash Drive Error: /boot/config/docker.cfg does not exist'");
}

$unRaidSettings = parse_ini_file($caPaths['unRaidVersion']);
$unRaid66 =       version_compare($unRaidSettings['version'],"6.5.3",">");
$unRaid68 =       version_compare($unRaidSettings['version'],"6.7.9",">");
$unRaid69 =       version_compare($unRaidSettings['version'],"6.8.2",">");
$translations =   is_file("$docroot/plugins/dynamix/include/Translations.php");
$unRaid69B2 =     version_compare($unRaidSettings['version'],"6.9.0-beta1",">");

// Check md5's of files
//exec("cd /usr/local/emhttp/plugins/$plugin/ && md5sum -c ca.md5",$output,$md5Error);

$previousLocale = $_COOKIE["locale"];

if ( $unRaid69B2 ) {
	switch ($theme) {
		case 'black':
			$swalBackground = "black";
			$tooltipsterContent = "#f2f2f2";
			break;
		case 'azure':
			$swalBackground = "white";
			$tooltipsterContent = "#101010";
			break;
		case 'gray':
			$swalBackground = "black";
			$tooltipsterContent = "#f2f2f2";
			break;
		case 'white':
			$swalBackground = "white";
			$tooltipsterContent = "#101010";
			break;
		default:
			$swalBackground = "black"; // default to black
			$tooltipsterContent = "#f2f2f2";
			break;
	}
}	else {
	$swalBackground = "white";
}

if ( is_file($caPaths['addConverted']) ) {
	$dockerConvertFlag = "true";
}
$date = (date("n/d"));

function tr($string,$ret=false) {
	if ( function_exists("_") )
		$string = str_replace('"',"&#34;",str_replace("'","&#39;",_($string)));
	if ( $ret )
		return $string;
	else
		echo $string;
}

?>
<? if ( ! $unRaid69 ):?>
<meta name="referrer" content="same-origin">
<?endif;?>
<link type='text/css' rel='stylesheet' href="<?=autov("/plugins/$plugin/skins/Narrow/css.php")?>" >
<? if ( is_file("$docroot/plugins/dynamix/styles/community.applications-$theme.css") ):?>
<link type='text/css' rel='stylesheet' href='<?=autov("/plugins/dynamix/styles/community.applications-$theme.css")?>'>
<? endif; ?>

<script src='<?autov("/plugins/community.applications/javascript/libraries.js")?>'></script>
<script>

var searchBoxInput;
var searchBoxAwesomplete;
var pluginInstallIntervalTimer;
var showRepoIntervalTimer;

var data = new Object();
data.docker = "";
data.section = "AppStore";
data.selected_category = "";
data.subcategory = "";
data.selected_subcategory = "";
data.selected = "";
data.lastUpdated = 0;
data.nextpage = 0;
data.prevpage = 0;
data.currentpage = 1;
data.searchFlag = false;
data.searchActive = false; // Sets whether changepage re-sorts the displayed templates.
data.previousAppsSection = ""; // The section the user is on within previous apps
var dockerSearchFlag = false;
var dockerNotEnabled;
var postCount = 0;
var cookieWarning = false;
var dockerWarningAdded = false;
var backupServerWarning = false;
var restoreStateMenu = false;
var initialStartup = true;
var repoBanner = false;
var repoBannerTimer = false;
var unRaidFontSize = $("html").css("font-size").replace("px","");

$(function(){
	window.onerror = function(msg,url,lineNo,columnNo, error) {
		post({action:'javascriptError',msg:msg,url:url,lineNo:lineNo,columnNo:columnNo,error:error});
	}
});
$(function(){
	// This file is guaranteed to exist on the flash drive.  Even though 6.10Beta3+ includes similar code, keep this code because CA just can't function properly with a flash offline / corrupted.
	<? if ( ! is_file($caPaths['docker_cfg']) ): ?>
		$(".mainArea,.menuItems").html("");
		swal({
			title: "<?tr("Fatal Flash Drive Error")?>",
			text: '<?tr('This usually means your flash drive is corrupted or has dropped offline.  The rest of the Unraid GUI will also be affected.  Post a new thread in the Unraid forums if this error continues')?>',
			html: true,
			type: 'error',
			showCancelButton: false,
			showConfirmButton: true,
			confirmButtonText: "<?tr('OK')?>"
		}, function (isConfirm) {
			if ( isConfirm ) {
				location.replace("/Main");
			}
		});
		return;
	<?endif;?>
	caPluginUpdateCheck("community.applications.plg",{
			noDismiss:true,
			name:"Community Applications",
			debug:false,
			priority:true
		},function(result) {
			var result = JSON.parse(result);
			$("#caInstalledVersion").html(result.installedVersion);
		}
	);

// Override the OS switch language function so that CA can save it's current state when switching via the OS
	$("#nav-item.LanguageButton").find("a").attr("onclick","CAswitchLanguage('<?=$previousLocale?>')");

	$("#title").append("<div class='searchArea'><span id='sortIconArea' style='display:none;'><i class='sortIcons fa fa-sort-alpha-asc enabledIcon ca_staticTips' title='<?tr("Sort By Name Ascending")?>' data-sortBy='Name' data-sortDir='Up'></i><i class='sortIcons fa fa-sort-alpha-desc ca_staticTips' title='<?tr("Sort By Name Descending")?>' data-sortBy='Name' data-sortDir='Down'></i><i class='sortIcons fa fa-sort-numeric-desc ca_staticTips' title='<?tr("Sort By Downloads")?>' data-sortBy='downloads' data-sortDir='Down'></i><i class='sortIcons fa fa-sort-amount-desc ca_staticTips' title='<?tr("Sort By Trend")?>' data-sortBy='trending' data-sortDir='Down'></i><i class='sortIcons fa fa-calendar ca_staticTips' title='<?tr("Sort By Date Added")?>' data-sortBy='FirstSeen' data-sortDir='Down'></i></span><span id='sortIcon' class='fa ca_toolsView disabledIcon'> <span class='fa-sort-alpha-asc'></span></span>&nbsp;<span id='searchFilter' class='status' style='margin-top:-1rem;'><input type='text' id='searchBox' placeholder='<?tr('Search')?>' autofocus><button class='searchSubmit' style='margin-right:10px' onclick='doSearch(true)'><i id='searchButton' class='fa fa-search fa-lg'></i></button></div>");

	searchBoxInput = document.getElementById("searchBox");
	searchBoxAwesomplete = new Awesomplete(searchBoxInput);

	if ( "<?=$date?>" == "12/24" ) addBannerWarning("<i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i> <?tr("Happy Holidays from Andrew, Tracey, and family")?> <i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i>",false);
	if ( "<?=$date?>" == "12/25" ) addBannerWarning("<i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i> <?tr("Happy Holidays from Andrew, Tracey, and family")?> <i style='float:initial;cursor:initial;' class='fa fa-snowflake-o'></i>",false);
	if ( "<?=$date?>" == "1/01" )  addBannerWarning("<?tr("Happy New Year!")?>",false);
	if ( "<?=$date?>" == "12/31" ) addBannerWarning("<?tr("Happy New Year!")?> <i style='float:initial;cursor:initial;' class='fa fa-beer'></i> <?tr("Please Enjoy Responsibly")?>",false);

	$('.ca_toolsView').tooltipster({
		trigger: 'hover',
		delay: [1000,0],
		animation: 'fade',
		triggerClose: {mouseleave:true},
		functionBefore: function(instance,helper){
			if ( isIconEnabled("#sortIcon") ) {
				instance.content("<?tr("Sorting options")?>");
			} else {
				instance.content("<?tr("Sorting options unavailable")?>");
			}
		}
	});

	$('.ca_staticTips').tooltipster({
		contentAsHTML:true,
		delay:[1000,1],
		timer:15000,
		animation:'none',
		arrow:true,
		trigger:'custom',
		triggerOpen:{mouseenter: true, hover: true},
		triggerClose:{click:true,scroll:true,mouseleave:true}
	});

	$("#searchBox").keydown(function(e) { // Allow ESC key to exit from tooltipster popups
		if (e.which === 13) {
			searchBoxAwesomplete.close();
			doSearch();
		}
	});
	$('body').keydown(function(e) {
		if (e.which === 27) {
			$(".tooltipstered").tooltipster('hide');
		}
	});

	$('.caChangeLog').on("click",function() {disableSort();scrollToTop();caChangeLog();});
	$('.mainArea').on("click",'.ca_multiselect',function() {enableMultiInstall();});

	$('.mainArea').on("click",".unpinned,.pinned",function() {
		if ( popupVisible(this) ) return;
		var repository = $(this).data("repository");
		var name = $(this).data("name");
		pinApp(this,repository,name);
	});

	$('.mainArea').on("click",".ca_favouriteRepo",function() {
		if ( popupVisible(this) ) return;
		$(".ca_fav").removeClass("ca_favouriteRepo").addClass("ca_non_favouriteRepo");
		$(".ca_holderFav").removeClass("ca_holderFav");
		$(this).removeClass("ca_favouriteRepo").addClass("ca_non_favouriteRepo");
		setToolTipForFavourite();
		post({action:'toggleFavourite',repository:""},function(data) {
			clearTimeout(repoBannerTimer);
			if ( repoBanner !== false ) {
				removeBannerWarning(repoBanner);
			}
			repoBanner = addBannerWarning("<?tr("Removed favourite repository");?>",false,true);
			repoBannerTimer = setTimeout(function(){
				removeBannerWarning(repoBanner);
				repoBanner = false;
			},5000);
			setFavRepoSearch();
		});
	});

	$('.mainArea').on("click",".ca_href",function() {
		if ( popupVisible() ) return;
		var href = $(this).attr("data-href");
		var target = $(this).attr("data-target");
		if ( ! target ) target = "_blank";
		window.open(href,target);
	});
	
	$('.mainArea').on("click",".ca_non_favouriteRepo",function() {
		if ( popupVisible(this) ) return;
		setFavourite(this);
	});
	
	$('body').on("click",".favPopup",function() {
		if ( popupVisible(this) ) return;
		setFavourite(this);
		$(this).removeClass(".favPopup");
		$(this).html(" Favourite Repository");
	});
	
	$('body').on("click",".ca_repoSearch,.ca_repoSearchPopUp",function() {
		if ( ! $(this).hasClass("ca_repoSearchPopUp") ) {
			if ( popupVisible(this) ) return;
		}
		var repo = $(this).data("repository");
		doSearch(false,repo);
	});


	$('.favouriteRepo').on("click",function() {
		if ( popupVisible(this) ) return;
		if ( $(this).hasClass("caMenuDisabled") )
			return;
		var repo = $(this).attr("data-repository");
		doSearch(false,repo);
	});

	$('.mainArea').on("click",".xmlInstall",function() {
		if ( popupVisible(this) ) return;
		var type = $(this).data("type");
		var xml = $(this).data("xml");
		xmlInstall(type,xml);
	});

	$('.menuItems').on("click",'.categoryMenu',function() {
		if ( popupVisible(this) ) return;
		if ( $(this).hasClass("caMenuDisabled") )
			return;
		if ( $(this).hasClass("selectedMenu") ) {
			if ( $(this).hasClass("caRepositoryMenu") ) {
				return;
			}
			if ( ! $(".caRepositoryMenu").hasClass("selectedMenu") ) {
				return;
			} 
			$(".caRepositoryMenu").removeClass("selectedMenu");
		}
		scrollToTop();
		changeCategory(this,false);
	});

	$('.menuItems').on("mouseover",".caMenuItem",function() {
		if ( $(this).hasClass("caMenuEnabled") ) {
			$(this).addClass("hoverMenu");
		}
	});

	$('.menuItems').on("mouseleave",".caMenuItem",function() {
		$(this).removeClass("hoverMenu");
	});

	$('.menuItems').on("click",".caMenuItem",function() {
		if ( popupVisible(this) ) return;
		if ( $(this).hasClass("caMenuDisabled") ) {
			return;
		}
		if ( $(this).hasClass("selectedMenu") ) {
			return;
		}
		if ( ! $(this).hasClass("caRepositoryMenu") ) {
			$(".caMenuItem").removeClass("selectedMenu");
			if ( ! $(this).parent().hasClass("subCategory") ) {
				$(".subCategory").hide("slow");
			}
		}
	
		$(this).addClass("selectedMenu");
		$(this).next().show("slow");
	});

	$(".sectionMenu").on("click",function() {
		if ( popupVisible(this) ) return;
		if ( $(this).hasClass("caMenuDisabled") ) 
			return;
		
		var section = $(this).attr("data-category");
		switch (section) {
			case "installed_apps":
				data.previousAppsSection = "";
				previousApps(true);
				break;
			case "inst_docker":
				data.previousAppsSection = "docker";
				previousApps(true,false,"docker");
				break;
			case "inst_plugins":
				data.previousAppsSection = "plugins";
				previousApps(true,false,"plugins");
				break;
			case "previous_apps":
				data.previousAppsSection = "";
				previousApps(false);
				break;
			case "prev_docker":
				data.previousAppsSection = "docker";
				previousApps(false,false,"docker");
				break;
			case "prev_plugins":
				data.previousAppsSection = "plugins";
				previousApps(false,false,"plugins");
				break;
			case "pinned_apps":
				pinnedApps();
				break;
		}
	});

	$(".debugging").on("click",function() {
		var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds
		var localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);
		var filename='CA-Logging-'+localISOTime.substr(0,16).replace(/[-:]/g,'').replace('T','-')+'.zip';

		$.post('/webGui/include/Download.php',{cmd:'save',file:filename,source:"<?=$caPaths['logging']?>"},function(zip) {
			location = zip;
		});
	});

	$(".clearSearch").click(function() {
		if ( $(this).hasClass("caMenuEnabled") ) {
			doSearch(true);
		}
	});

	$(".initDockerSearch").click(function()     { if ( popupVisible(this) ) return;initDockerSearch(); });
	$(".multi_installButton").click(function()  { if ( popupVisible(this) ) return;installMulti(); });
	$(".multi_installClear").click(function()   { if ( popupVisible(this) ) return;clearMultiInstall(); });
	$(".multi_deleteButton").click(function()   { if ( popupVisible(this) ) return;deleteMulti(); });
	$(".multi_installAll").click(function()     { if ( popupVisible(this) ) return;selectAllPrevious(); enableMultiInstall(); });
	$(".startupButton").click(function()        { if ( popupVisible(this) ) return;updateContent(this); });
	$("#sortIcon").click(function() {
		if ( popupVisible(this) ) return;
		if ( isIconEnabled("#sortIcon") ) {
			$("#sortIconArea").toggle("slow");
		}
	});
	$(".sortIcons").click(function() {
		if ( popupVisible(this) ) return;
		$(".sortIcons").removeClass("enabledIcon");
		$(this).addClass("enabledIcon");
		data.currentpage = 1;
		data.searchActive = false;
		var sortOrder = new Object();
		sortOrder.sortBy = $(this).attr("data-sortBy");
		sortOrder.sortDir = $(this).attr("data-sortDir");
 		var classList = $(this).attr('class').split(/\s+/);
		$.each(classList, function(index, item) {
			if ( item.startsWith("fa-") ) {
				$("#sortIcon").html("&nbsp;<span class="+item+"></span>");
			}
		});
		post({action:"changeSortOrder",sortOrder:sortOrder},function() {
			changeSortOrder();
			$("#sortIconArea").toggle("slow");
		});
	});

	$('.mainArea').on("click",".languageSwitch",function() {
		if ( popupVisible(this) ) return;
		CAswitchLanguage($(this).data("language"));
	});

	$('.mainArea').on("click",".languageInstall",function() {
		installLanguage($(this).data("language_xml"),$(this).data("language"));
	});

	$('.mainArea').on("click",".languageRemove",function() {
		if ( popupVisible(this) ) return;
		removeLanguage($(this).data("language"));
	});

	$('.mainArea').on("click",".languageUpdate",function() {
		if ( popupVisible(this) ) return;
		updateLanguage($(this).data("language"));
	});

<?if ( version_compare($unRaidSettings['version'],"6.9.0-beta38","<") ):?>
	$('.mainArea').on("mouseover",".ca_discord",function() {
		$(this).attr("src","/plugins/community.applications/images/discord-hover.svg");
	});

	$('.mainArea').on("mouseleave",".ca_discord",function() {
		$(this).attr("src","/plugins/community.applications/images/discord-<?=$theme?>.svg");
	});
<?endif;?>

<?if ( ! $unRaid66 ):?>
	$("html").css("font-size","10px");
<?endif;?>

	/* Everything is now initialized.  This is the start of the actual "real" code */
	if ( "<?=$firstRun?>" == "true" ) {
	  $(".ca_templatesDisplay").hide();
		swal({
			title: "<?tr("Disclaimer")?>",
			text: '<?tr('All applications listed here are 3rd party additions to Unraid.  Neither the authors of Community Applications nor Limetech make any warranty as to the suitability of any application listed here')?> <br><span class="ca_italic"><font color="green"><?tr('Every attempt is made to ensure that only safe and compatible applications are present')?></font></span><br><br><center><a href="https://forums.unraid.net/topic/87144-ca-application-policies/" target="_blank"><?tr('Application Policy')?></a>',
			html: true,
			type: 'warning',
			showCancelButton: true,
			showConfirmButton: true,
			cancelButtonText: "<?tr('Cancel')?>",
			confirmButtonText: "<?tr('I Understand')?>"
		}, function (isConfirm) {
			if ( isConfirm ) {
				post({action:'dismiss_warning'},function(result) {
					location.reload();
				});
			} else {
			$(".ca_templatesDisplay").show();
				addBannerWarning("<?tr("Installations of apps disabled.  You must accept the warning to be able to install applications.")?>   <a onclick='window.location.reload();' style='cursor:pointer;'><?tr("Click here")?></a>",true,true);
				updateContent();
			}
		});
	} else if ( "<?=$pluginWarning?>" == "false" ) {
		$(".ca_templatesDisplay").hide();
		swal({
			title: "<?tr('Plugins')?>",
			text: '<?tr('Community Applications contains both docker containers and plugin applications.  Plugins are designed for OS enhancements, and run with full privileges on your system and are clearly identified within CA.')?><br><br><ceter><a href="https://forums.unraid.net/topic/87144-ca-application-policies-notes/?tab=comments#comment-817555" target="_blank"><?tr('Plugin Note')?></a></center>',
			type: 'warning',
			html: true,
			showCancelButton: false,
			showConfirmButton: true,
			confirmButtonText: "<?tr("I Understand")?>"
		}, function (isConfirm) {
			if (isConfirm) {
				post({action:'dismiss_plugin_warning'},function(result) {
					location.reload();
				});
			}
		});
	} else {
		if ( (document.referrer.indexOf("/Apps/") > 1) && ( document.referrer.indexOf("/Apps/ca_settings") < 1 ) && cookiesEnabled() && ("<?=$dockerConvertFlag?>" != "true") || $.cookie("ca_languageSwitch") ) {
			initialStartup = false;
			getCategories();
			restoreState();
			refreshDisplay();
			searchBoxAwesomplete.close();
			initialStartup = true;
		} else {
			post({action:"defaultSortOrder"},function() {
				updateContent();
			});
		}
	}
});

// Shows the repository from the app's popup
function showRepo(el) {
	var id = $(el).data("appid");
	var repo_el = $.find(".tooltipstered[data-appid='"+id+"']");
	$(".tooltipstered").tooltipster("hide");
	$(repo_el).tooltipster("open");
}
function disableSort() {
	hideSortIcons();
	enableIcon("#sortIcon",false);
}
function hideSortIcons() {
	$("#sortIconArea").hide("slow");
}

function updateContent(button) {
	hideSortIcons();
	clearSearchBox();
	clearCategory();
	$(".caMenuItem").removeClass("selectedMenu");
	$(".subCategory").hide();

	startupScreen = $.cookie("ca_startupButton") ? $.cookie("ca_startupButton") : "onlynew";
	$(".caMenuItem[data-category='"+startupScreen+"']").addClass("selectedMenu");

	startupScreen = button ? $(button).data("category") : startupScreen;
	$.cookie("ca_startupButton",startupScreen,{expires:365});
	$.cookie("ca_selectedMenu",startupScreen,{expires:365});
	disableSearch();

	post({action:'force_update'}, function(result) {
		if ( $.cookie("ca_plugininstallpending" || ! button ) ) {
			var plugins = $.cookie("ca_plugininstallpending");
			$.removeCookie("ca_plugininstallpending");
			myCloseAlert();
			openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.sh&arg1='+plugins,"<?tr('Install Plugin Applications')?>",600,900,true);
		} else {
			if ( result.data ) {
				updateDisplay(result.data);
			} else {
				data.searchActive = true;
				getContent(true,'INITIALIZE',"","",startupScreen);
			}
		}
		getCategories();
	});
}

function enableIcon(icon,enable) {
	enable = (enable == "false") ? false : enable;
	$(icon).each(function() {
		$(this).removeClass("enabledIcon disabledIcon");
		var newClass = enable ? "enabledIcon" : "disabledIcon";
		$(this).addClass(newClass);
	});
}

function isIconEnabled(icon) {
	return $(icon).hasClass("enabledIcon");
}

function stripTags(string) {
	return string.replace(/(<([^>]+)>)/ig,"");
}

function setToolTip() {
//	$('.tooltipstered').tooltipster('destroy');
	$('.ca_tooltip-warning').tooltipster({
		contentAsHTML:true,
		interactive:true,
		multiple:true,
		trigger:'custom',
		triggerOpen:{click: true, mouseenter: true},
		triggerClose:{click:true,scroll:true,mouseleave:true}
	});

	$(".ca_repoPopup,.ca_repoinfo,.ca_reporeadmore").tooltipster({
		contentAsHTML:true,
		interactive:true,
		trigger:'custom',
		triggerOpen:{click:true,touchstart:true},
		multiple:true,
		minWidth:unRaidFontSize*60,
		maxWidth:unRaidFontSize*60,
		triggerClose:{click:true},
		onlyOne:true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var repository = origin.attr("data-repository");
			if ( ! $(origin).hasClass("ca_repoPopup") && popupVisible() ) {
				origin.tooltipster("close");
				return false;
			}			
			$(".ca_repoPopup").tooltipster("hide");

			post({action:'getRepoDescription',repository:repository},function(data) {
				origin.tooltipster("content",data.description);
			});
		},
		functionAfter: function(helper) {
			var origin = $(helper.origin);
			origin.tooltipster("hide");
		}
	});
	
	$(".ca_appPopup").tooltipster({
		contentAsHTML:true,
		interactive:true,
		trigger:'custom',
		triggerOpen:{click:true,touchstart:true},
		multiple:true,
		minWidth:unRaidFontSize*60,
		maxWidth:unRaidFontSize*60,
		triggerClose:{click:true,tap:true},
		onlyOne:true,
		functionInit: function(instance,helper) {
			var origin = $(helper.origin);
			origin.tooltipster("content","<div class='popupHolder' style='height:450px;'>Loading</div>");
		},
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var appnumber = $(origin).data("appnumber");
			var apppath = $(origin).data("apppath");
			var appname = $(origin).data("appname");
			var beta = " "+$(origin).data("beta");
			if ( popupVisible() ) {
				origin.tooltipster("close");
				return false;
			}
			appname = stripTags(appname);
			post({action:'getPopupDescription',appName:appname,appPath:apppath},function(result) {
				origin.tooltipster("content",result.description);
				popUpChart(result,appnumber);
				
			});
		},
		functionAfter: function(helper) {
			var origin = $(helper.origin);
			origin.tooltipster("hide");
		}
	});
			
}

function showSpecialCategory(button) {
	$(".caMenuItem").removeClass("selectedMenu");
	$(".multi_installDiv").hide();
	data.selected_category = "DOESNTMATTERWHATSHERE";
	data.section = "AppStore";
	changeCategory(button,false);
}

function changeCategory(button,subSwitch) {
	var description = $(button).text();
	var category = $(button).attr("data-category");

	hideSortIcons();
	$(".multi_installDiv").hide();
	getContent(false,category,description,false);
}

function changePage(pageNumber) {
	var selected = data.selected;
	data.currentpage = pageNumber;

	var oldHeight = $(".ca_templatesDisplay").height();
	$(".ca_templatesDisplay").css("height",oldHeight);
	hideSortIcons();
	post({action:'display_content',pageNumber:pageNumber,selected:selected},function(result) {
		updateDisplay(result.display);
		$(".ca_templatesDisplay").css("height","auto");
	});
}

function swalBackground(color) {
	$(".sweet-alert").css("background-color",color);
}

function myAlert(description,textdescription,textimage,imagesize, outsideClick, showCancel, showConfirm, alertType) {
	if ( !outsideClick ) outsideClick = false;
	if ( !showCancel )   showCancel = false;
	if ( !showConfirm )  showConfirm = false;
	if ( imagesize == "" ) { imagesize = "80"; }
	disableSearch();

	swal({
		title: description,
		text: textdescription,
		allowOutsideClick: outsideClick,
		showConfirmButton: showConfirm,
		showCancelButton: showCancel,
		cancelButtonText: "<?tr("Cancel")?>",
		type: alertType,
		animation: false,
		html: true
	});
}

function mySpinner() {
	$("div.spinner").show();

	swalBackground("transparent");
	swal({
		title: "",
		text: "",
		allowOutsideClick: false,
		showConfirmButton: false,
		showCancelButton: false,
		animation: false,
		html: true
	});
	swalBackground("transparent"); // Occasional race condition where swal is not initialized at time the initial background change happens

}

function myCloseSpinner() {
	swal.close();
	$("div.spinner, .sweet-alert").hide();
	swalBackground("<?=$swalBackground?>");
}

function myCloseAlert() {
	swal.close();
	$("div.spinner, .sweet-alert").hide();
	swalBackground("<?=$swalBackground?>");
	enableSearch();
}

function doSearch(button,newSearch) {
	hideSortIcons();

	if ( ! newSearch === false ) {
		$('#searchBox').val(newSearch);
	}
	var filter = $('#searchBox').val();

	data.docker = "";
	data.section = "AppStore";
//	filter = filter.replace(/[^a-z0-9-]/gi,' ')
	filter = $.trim(filter);
	$('#searchBox').val(filter);
	$(".multi_installDiv").hide();

	if ($('#searchButton').hasClass('fa-search')) {
		if (filter) {
			$('#searchButton').toggleClass('fa-search fa-remove');
		}
	} else if (button) {
		clearSearchBox();
		filter = '';
	} 

	scrollToTop();
	if (filter) {
		$("#Category").html(sprintf(tr("Search for %s"),filter));
		$(".clearSearch").removeClass("caMenuDisabled").addClass("caMenuEnabled");
		enableIcon("#sortIcon",true);
		data.searchFlag = true;
	} else {
		updateContent();
		data.searchFlag = false;
		return;
	}
	data.searchActive = true;
	if ( "<?=$cfg['dockerSearch']?>" == "yes" && ! dockerNotEnabled && (filter.indexOf(" Repository") < 1) ) {
		$('.dockerSearch').show();
	} else {
		$('.dockerSearch').hide();
	}
	post({action:'get_content',filter:filter},function(result) {
		enableButtons();
		updateDisplay(result.display);
		data.section = "AppStore";
		$(".selectedMenu").removeClass("selectedMenu");
		$(".subCategory").hide();
		$(".allApps").addClass("selectedMenu");
		post({action:'getCategoriesPresent'},function(result) {
			$(".categoryMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
			result.forEach(function(category) {
				var menuItem = $.find(".caMenuItem[data-category='"+category+"']");
				$(menuItem).removeClass("caMenuDisabled").addClass("caMenuEnabled");
			});
		});
	});
}

function enableButtons() {
	data.selected_category = "";
}

function refreshDisplay() {
	changeSortOrder(null,null,null);
}

function changeSortOrder(button,buttonClass,previousApps) {
	var pageNumber = data.currentpage;
	var selected = data.selected;
	var startup = false;
	if ( button || buttonClass || previousApps) {
		data.searchFlag = false;
	}
	console.log("data");
	console.log(data);

	$(".startupButton").each(function(){
		if ($(this).hasClass("selectedMenu")) {
			startup = "true";
		}
	});
	post({action:'display_content',pageNumber:pageNumber,selected:selected,startup:startup},function(result) {
		updateDisplay(result.display);
	});
}

function getContent(init,category,description,newApp,startupDisplay) {
	data.currentpage = 1;
	var initialize;

	enableSearch();
	enableIcon("#sortIcon", ! init);

	if ( category != "NONE" ) {
		if ( category == "INITIALIZE" ) {
			initializeAppStore();
			category = "NONE";
			initialize = true;
			enableButtons();
		}
		if ( (category == "New") || (category == "All") ) { category = ""; }

		var el_dl = $.find(".sortIcons[data-sortby='downloads']");
		var el_tr = $.find(".sortIcons[data-sortby='trending']");
		if ( category == "repos" ) {
			$(el_dl).tooltipster("content","<?=tr("Sort By Number Of Apps")?>");
			$(el_tr).tooltipster("content","<?=tr("Sort By Average Trend")?>");
		} else {
			$(el_dl).tooltipster("content","<?=tr("Sort By Downloads")?>");
			$(el_tr).tooltipster("content","<?=tr("Sort By Trend")?>");
		}

		var filter = $('#searchBox').val();
		if ( ! filter ) {
			$('.dockerSearch').hide();
		}
		post({action:'get_content',filter:filter,category:category,newApp:newApp,startupDisplay:startupDisplay},function(result) {
			updateDisplay(result.display);
			if ( initialize ) {
				populateAutoComplete();
			}
		});
	}
}

function populateAutoComplete() {
	post({action:'populateAutoComplete'},function(result) {
		searchBoxAwesomplete.list = result.autocomplete;
		searchBoxAwesomplete.maxItems = 20;
		searchBoxAwesomplete.minChars = 3;
		Awesomplete.$('#searchBox').removeEventListener('awesomplete-selectcomplete',awesompleteSearch);
		Awesomplete.$('#searchBox').addEventListener('awesomplete-selectcomplete',awesompleteSearch);
		searchBoxAwesomplete.close(); // otherwise it opens automatically during restore state
	});
}

function awesompleteSearch() {
	doSearch(false);
}

function mySearch(filter) {
	filter = filter.replace(/<(?:.|\n)*?>/gm, '');
	$('#searchBox').val(filter);

	if ( $("#searchButton").hasClass('fa-search') ) {
		$('#searchButton').toggleClass('fa-search fa-remove');
	}
	initDockerSearch(1);
}

function initDockerSearch() {
	dockerSearch(1);
	data.docker = "searching docker";
	data.section = "";
	data.selected_category = "";
	$(".selectedMenu").removeClass("selectedMenu");
	hideSortIcons();
	$(".subCategory").hide();
}

function dockerSearch(pageNumber) {
	var filter = $('#searchBox').val();
	var dockerURL = "https://registry.hub.docker.com/search?q=" + filter;
	data.docker = "searching docker";
	enableIcon("#sortIcon",false);
	$(".dockerSearch,.multi_installDiv").hide();
	$("#Category").html(sprintf(tr("DockerHub Search for %s"),filter)+" <span id='pageNumber'></span>");
	post({action:'search_dockerhub',filter:filter,page:pageNumber},function(result) {
		updateDisplay(result.display);
	});
}

function dockerConvert(dockerID) {
	post({action:'convert_docker',ID:dockerID},function(result) {
		myCloseAlert();
		templateURL = "/Apps/AddContainer?xmlTemplate=default:" + $.trim(result.xml);
		openNewWindow(templateURL);
	});
}

function openNewWindow(newURL) {
	var popUp = window.open(newURL,"_self");
	if ( !popUp || popUp.closed || typeof popUp == "undefined" ) {
		addBannerWarning("<?tr("Popup Blocked.  CA requires popups to be enabled under certain circumstances.  You must white list your server within your browser to allow popups")?>",true,true);
	}
}

function clearSearchBox() {
	$(".categoryMenu").removeClass("caMenuDisabled").addClass("caMenuEnabled");
	$("#searchBox").val("");
	if ($('#searchButton').hasClass('fa-remove')) {
		$('#searchButton').toggleClass('fa-remove fa-search');
	}
	$(".clearSearch").removeClass("caMenuEnabled").addClass("caMenuDisabled");
}

function popupVisible(el) {
	if ( $(el).hasClass("appIconsPopUp") ) 
		return false;
	
	return $(".popupHolder").is(":visible");
}

function installPlugin(pluginURL,popup=false) {
	if ( ! popup)
		if ( popupVisible() )
			return;
		
	$(".tooltipstered").tooltipster("hide");
	disableSearch();
	<? if ( $translations ): ?>
		openBox('/plugins/community.applications/scripts/pluginInstall.sh&arg1=install&arg2='+pluginURL,"<?tr('Install Plugin')?>",600,900,true,"refreshDisplay");
	<? else: ?>
		my_openBox('/plugins/community.applications/scripts/pluginInstall.sh&arg1=install&arg2='+pluginURL,"<?tr('Install Plugin')?>",600,900,true,"refreshDisplay");
	<? endif; ?>
}

function my_openBox(cmd,title,height,width,load,func) {
	// open shadowbox window (run in foreground)
	var run = cmd.split('?')[0].substr(-4)=='.php' ? cmd : '/logging.htm?cmd='+cmd+'&csrf_token=<?=$var['csrf_token']?>';
	var options = load ? {modal:false,onClose:function(){ eval(func); }} : {modal:true};
	Shadowbox.open({content:run, player:'iframe', title:title, height:height, width:width, options:options});
}

function showDesc_openBox(cmd,title,height,width,load,func) {
	// open shadowbox window (run in foreground)
	var run = cmd.split('?')[0].substr(-4)=='.php' ? cmd : '/logging.htm?cmd='+cmd+'&csrf_token=<?=$var['csrf_token']?>';
	var options = load ? {modal:false,onClose:function(){ eval(func); }} : {modal:true};
	Shadowbox.open({content:run, player:'iframe', title:title, height:height, width:width, options:options});
}

function showModeration(script,title) {
	$("#sb-nav-close").css("visisbility","visible");
	showDesc_openBox("/plugins/<?=$plugin?>/scripts/showStatistics.php?arg1="+script,title,550,900,true,false);
}

function previousApps(installed,dontClear=false,filter="") {
	hideSortIcons();
	clearCategory();
	setPageOne();
	data.docker = "";

	clearSearchBox();
	$(".dockerSearch").hide();
	enableIcon("#sortIcon",true);

	post({action:'previous_apps',installed:installed,filter:filter},function(result) {
		if ( installed ) {
			$(".multi_installDiv").hide();
		} else {
			$(".multi_installDiv").show();
			if ( ! dontClear ) {
				clearMultiInstall();
			}
		}
		changeSortOrder(null,null,"true");
		saveState();
	});
}

function removeApp(application, humanName) {
	disableSearch();
	swal({
		title: "<?tr("Delete Template?")?>",
		text: sprintf(tr("Are you sure you want to delete %s from the list of previously installed applications?"),"<font color='red'><strong><span class='ca_italic'>"+humanName+"</span></strong></font>")+"<br><font size='0'>"+application+"</font>",
		type: "warning",
		confirmButtonText: "<?tr("Yes, delete it!")?>",
		cancelButtonText: "<?tr("Cancel")?>",
		showCancelButton: true,
		showConfirmButton: true,
		allowOutsideClick: true,
		html: true
	}, function(isConfirm) {
		if (isConfirm) {
			$('input[type="checkbox"][data-humanName="'+humanName+'"]').prop("checked",false);			// remove the checkbox from the app
			enableMultiInstall(); // update the count
			post({action:'remove_application',application:application}, function(result) {
				enableSearch();
				previousApps(false,true,data.previousAppsSection);
			});
		} else {
			enableSearch();
		}
	});
}

function uninstallApp(application,humanName) {
	disableSearch();
	swal({
		title: "<?tr("Uninstall Application?")?>",
		text: sprintf(tr("Are you sure you want to uninstall %s?"),"<font color='red'><strong><span class='ca_italic'>"+humanName+"</span></strong></font>"),
		type: "warning",
		showCancelButton: true,
		showConfirmButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		confirmButtonText: "<?tr("Yes uninstall it")?>",
		closeOnConfirm: true,
		showLoaderOnConfirm: false,
		allowOutsideClick: true,
		html: true
	}, function(isConfirm) {
		if (isConfirm) {
			application = application.basename();
			<? if ( $translations ): ?>
				openBox('/plugins/community.applications/scripts/pluginInstall.sh&arg1=remove&arg2='+application,"<?tr('Uninstall Plugin')?>",600,900,true,"postUninstallPlugin");
			<? else: ?>
				my_openBox('/plugins/community.applications/scripts/pluginInstall.sh&arg1=remove&arg2='+application,"<?tr('Uninstall Plugin')?>",600,900,true,"postUninstallPlugin()");
			<? endif; ?>
		} else {
			enableSearch();
		}
	});
}

function postUninstallPlugin() {
	previousApps(true,false,data.previousAppsSection);
	enableSearch();
}

String.prototype.basename = function() {
	return this.split('/').reverse()[0];
}

function deletePrivateApp(path,name,author) {
	var displayPath = path.replace("/boot/config/plugins/","...");
	disableSearch();
	swal({
		title: "<?tr("Remove Private Application?")?>",
		text: sprintf(tr("Are you sure you want to remove the private application %s by %s?"),"<span class='ca_italic'><font color='red'><span class='ca_bold'>"+name+"</span></font>","<font color='red'><span class='ca_bold'>"+author+"</span></font>")+"<br><font size='0'>("+displayPath+")",
		type: "warning",
			showCancelButton: true,
			showConfirmButton: true,
			cancelButtonText: "<?tr("Cancel")?>",
			confirmButtonText: "<?tr("Yes, remove it!")?>",
			closeOnConfirm: false,
			showLoaderOnConfirm: true,
			allowOutsideClick: true,
			html: true
	}, function(isConfirm) {
		if ( isConfirm ) {
			swal(sprintf(tr("Removing %s"),name),"","info");
			getSelectedApps();
			post({action:'removePrivateApp',path:path,noSpinner:true},function(result) {
				myCloseAlert();
				refreshDisplay();
				enableSearch();
			});
		} else {
			enableSearch();
		}
	});
}

function uninstallDocker(application,humanName) {
	disableSearch();
	swal({
		title: "<?tr("Uninstall Application?")?>",
		text: sprintf(tr("Are you sure you want to uninstall %s?"),"<font color='red'><strong><span class='ca_italic'>"+humanName+"</span></strong></font>"),
		type: "warning",
		showCancelButton: true,
		showConfirmButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		confirmButtonText: "<?tr("Yes uninstall it")?>",
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		allowOutsideClick: true,
		html: true
	}, function( isConfirm ) {
		if ( isConfirm ) {
			myAlert("",sprintf(tr("Uninstalling %s"),humanName));
			post({action:'uninstall_docker',application:application,noSpinner:true},function(result) {
				enableSearch();
				previousApps(true,false,data.previousAppsSection);
			});
		} else {
			enableSearch();
		}
	});
}

function appStore() {
	data.nextpage = 0;
	data.prevpage = 0;
	initializeAppStore();
	updateContent();
	clearCategory();
	data.docker = "";
}

function initializeAppStore() {
	data.section = "AppStore";
	data.selected_category = "";
	$(".multi_installDiv").hide();
}

function checkPLGupdate() {
	var filename = data.plgfilename;
	post({action:'updatePLGstatus',filename:filename},function(result) {
		var pageNumber = data.currentpage;
		changePage(pageNumber);
	});
}

function pinApp(button,repository,name) {
	$(button).toggleClass("pinned unpinned");
	var pinned = ( $(button).hasClass("unpinned") ) ? "<?tr("Click to pin this application")?>" : "<?tr("Click to unpin this application")?>";
	$(button).attr('title',pinned);
	post({action:'pinApp',repository:repository,name:name},function(data) {
		if ( data.status ) {
			$('.caPinnedMenu').removeClass('caMenuDisabled').addClass('caMenuEnabled');
		} else {
			$('.caPinnedMenu').removeClass('caMenuEnabled').addClass('caMenuDisabled');
		}
	});
}

function setPageOne() {
	data.currentpage = 1;
}
	
function clearCategory() {
	$("#Category").html("&nbsp;");
}

function pinnedApps() {
	setPageOne();
	hideSortIcons();
	data.docker = "";
	clearSearchBox();
	clearCategory();
	$(".dockerSearch,.multi_installDiv").hide();
	enableIcon("#sortIcon",true);
	post({action:'pinnedApps'},function(result) {
		refreshDisplay();
		myCloseAlert();
	});
}

function displayTags(leadTemplate,popup=false) {
	if ( ! popup)
		if ( popupVisible() )
			return;
		
	$(".tooltipstered").tooltipster("hide");
	post({action:'displayTags',leadTemplate:leadTemplate,noSpinner:true},function(result) {
		disableSearch();
		swal({
			title: "<?tr("Choose A Branch To Install")?>",
			text: result.tags,
			html: true,
			type: "warning",
			showCancelButton: true,
			showConfirmButton: false,
			cancelButtonText: "<?tr("Cancel")?>",
			allowOutsideClick: true
		}, function(isConfirm) {
			if ( ! isConfirm ) {
				enableSearch();
			}
		});
	});
}

function xmlInstall(type,xml) {
	saveState();
	post({action:'createXML',xml:xml},function(result){
		if ( result.status == "ok" ) {
			openNewWindow("/Apps/AddContainer?xmlTemplate="+type+":"+xml);
		}
	});
}

function makePlural(string,count) {
	return ( (count > 1) || (count == 0) ) ? string + "s" : string;
}
function selectAllPrevious() {
	$(".ca_multiselect").each(function() {
		$(this).prop("checked",true);
	});
	getSelectedApps();
}

function getSelectedApps() {
	if ( data.selected ) {
		var selected = JSON.parse(data.selected);
		var deletePaths = selected.deletePaths;
		var docker = selected.docker;
		var plugin = selected.plugin;
	} else {
		var selected = new Object();
		var deletePaths = new Array();
		var docker = new Array();
		var plugin = new Array();
	}

	$(".ca_multiselect").each(function() {
		var name = $(this).attr("data-name");
		var deletechecked = $(this).attr("data-deletepath");
		if ( $(this).is(':checked') ) {
			deletePaths.push(deletechecked);
			if ( $(this).attr("data-type") == "plugin" ) {
				plugin.push(name);
			} else {
				docker.push(name);
			}
		} else {
			var index= deletePaths.indexOf(deletechecked);
			if ( index > -1 ) {
				deletePaths.splice(index,1);
			}
			var index = plugin.indexOf(name);
			if ( index > -1 ) {
				plugin.splice(index,1);
			}
			var index = docker.indexOf(name);
			if (index > -1 ) {
				docker.splice(index,1);
			}
		}
	});
	selected.docker = uniqueArrayElements(docker);
	selected.plugin = uniqueArrayElements(plugin);
	selected.deletePaths = uniqueArrayElements(deletePaths);
	data.selected = JSON.stringify(selected);
	return selected;
}

function uniqueArrayElements(sourceArray) {
	var uniqueEntries = new Array();
	$.each(sourceArray, function(i, el) {
		if ($.inArray(el,uniqueEntries) === -1) {
			uniqueEntries.push(el)
		}
	});
	return uniqueEntries;
}

function enableMultiInstall() {
	var selected = getSelectedApps();
	var count = selected.plugin.length + selected.docker.length;
	if ( count == 0 ) {
		$(".multi_install,.multi_installClear").attr("disabled",true);
		$(".multi_deleteButton").css("visibility","hidden");
		$(".multi_installButton").val("<?tr("Install Selected Applications")?>");
	} else {
		$(".multi_install,.multi_installClear").attr("disabled",false);
		$(".multi_deleteButton").css("visibility","visible");
		var buttonText = (count == 1) ? sprintf(tr("Install %s Selected Application"),count) : sprintf(tr("Install %s Selected Applications"),count);
		$(".multi_installButton").val(buttonText);
	}
	getSelectedApps();
}

function clearMultiInstall() {
	data.selected = "";
	$(".ca_multiselect").each(function() {
		$(this).prop("checked",false);
	});
	$(".multi_install,.multi_installClear").attr("disabled",true);
	enableMultiInstall();
}

function installSort(a,b) {
	if (a[0] === b[0]) {
		return 0;
	} else {
		return (a[0] < b[0]) ? -1 : 1;
	}
}

function deleteMulti() {
	var selected = getSelectedApps();
	swal({
		title: "<?tr("Delete Template?")?>",
		text: sprintf(tr("Are you sure you want to delete %s applications from the previously installed list?"),"<font color='red'><strong>"+selected.deletePaths.length+"</strong></font>"),
		type: "warning",
		confirmButtonText: "<?tr("Delete")?>",
		cancelButtonText: "<?tr("Cancel")?>",
		showCancelButton: true,
		showConfirmButton: true,
		allowOutsideClick: true,
		html: true
	}, function(isConfirm) {
		if (isConfirm) {
			post({action:'remove_multiApplications',apps:selected.deletePaths}, function(result) {
				clearMultiInstall();
				enableSearch();
				previousApps(false,true);
			});
		} else {
			enableSearch();
		}
	});
}

function installMulti() {
	var docker = new Array();
	var pluginArray = new Array();
	var plugin = "";
	var pluginCount = 0;
	var dockerCount = 0;
	var selected = getSelectedApps();
	var cookieWarning = "";

	$.each(selected.plugin,function(i,el) {
		pluginArray.push([el.basename().replace(".plg",""),el]);
		pluginCount += 1;
	});
// Sort them so that the install in the same order as if the system was booting.
// NOTE: The sort drops the .plg from the order so that UD+ winds up installing after UD.  This differs from the boot sequence.
	pluginArray.sort(installSort);
	if (pluginCount) {
		pluginArray.forEach( function(value) {
			plugin += value[1] + "*";
		});
	}

	$.each(selected.docker,function(i,el) {
		docker.push(el);
		dockerCount += 1;
	});
	disableSearch();
	if ( ! cookiesEnabled() && dockerCount && pluginCount ) {
		pluginCount = 0;
		cookieWarning = "<br><?tr("Cookies not enabled.  Plugins must be separately installed from docker applications")?>";
	}
	if ( (dockerCount + pluginCount) > 1 ) {
		var buttonText = "<?tr("Yes, install them")?>";
	} else {
		var buttonText = "<?tr("Yes, install it")?>";
	}
	var text = sprintf(tr("Are you sure you want to install %s docker and %s plugin application(s)?"),dockerCount,pluginCount);
	text = text.concat(dockerCount ? "<br><span class='ca_italic'><?tr("Docker applications will be installed utilizing the most recently saved template with no user input on your part")?></span>" : "");
	text = text.concat(cookieWarning ? "<br><font color='red'>"+cookieWarning+"</font>" : "");
	swal({
		title: dockerCount+pluginCount > 1 ? tr("Install Applications") : tr("Install Application"),
		text: text,
		type: "info",
		showCancelButton: true,
		cancelButtonText: "<?tr("Cancel")?>",
		showConfirmButton: true,
		confirmButtonText: buttonText,
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		allowOutsideClick: true,
		html: true
	}, function( isConfirm ) {
		if ( isConfirm ) {
			myCloseAlert();
			if ( docker.length && plugin.length ) {
				$.cookie("ca_plugininstallpending",plugin);
			}
			if ( docker.length ) {
				$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
				openBox('/plugins/<?=$plugin?>/scripts/installMulti.php?plugin='+plugin+'&docker='+docker,tr('Install '+makePlural("Application",dockerCount)),600,1100,true);
			} else {
				openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.sh&arg1='+plugin,tr('Install '+makePlural("Application",pluginCount)),600,900,true);
				enableSearch();
			}
		} else {
			enableSearch();
		}
	});
}

function updateDisplay(data) {
	$("#templates_content").html(data);
	setToolTip();
	enableSearch();
	$('img').on("error",function() {
		$(this).attr('src',"/plugins/dynamix.docker.manager/images/question.png");
	});
	myCloseAlert();
		
	saveState();
}

function saveState() {
	if ( ! dockerSearchFlag ) {
		<? if ( $cfg['debugging'] == "yes" ):?>
			console.log("Save State");
		<?endif;?>
		$.cookie("ca_categoryText",$("#Category").html());
		$.cookie("ca_data",JSON.stringify(data));
		$.cookie("ca_dockerSearchFlag",dockerSearchFlag);
		$.cookie("ca_searchActive",data.searchActive);
		$.cookie("ca_installMulti",$(".multi_installDiv").is(":visible"));
		var selectedMenu = $(".selectedMenu").data("category");
		if ( ! selectedMenu ) {
			selectedMenu = "";
		}
		var categoriesEnabled = new Array();
		$(".caMenuEnabled").each(function(){
			categoriesEnabled.push($(this).data("category"));
		});
		$.cookie("ca_categories_enabled",JSON.stringify(categoriesEnabled));
			console.log(categoriesEnabled);
		$.cookie("ca_selectedMenu",selectedMenu);
		$.cookie("ca_sortIcon",isIconEnabled("#sortIcon"));
		$.cookie("ca_filter",$("#searchBox").val());
		$.cookie("ca_categoryName",$(".categoryMenuName").html());
	}
}

function restoreState() {
	swalBackground("transparent");

	<? if ( $cfg['debugging'] == "yes" ):?>
		console.log("Restore State");
	<?endif;?>
	$.removeCookie("ca_languageSwitch",{path:'/'});

	$("#Category").html($.cookie("ca_categoryText"));
	if ( $.cookie("ca_installMulti") == "true" ) {
		$(".multi_installDiv").show();
	} else {
		$(".multi_installDiv").hide();
	}
	data = JSON.parse($.cookie("ca_data"));
	dockerSearchFlag = $.cookie("ca_dockerSearchFlag");
	data.searchActive = $.cookie("ca_searchActive");
	restoreStateMenu = $.cookie("ca_selectedMenu");
	$(".categoryMenuName").html($.cookie("ca_categoryName"));
	var filter = $.cookie("ca_filter");
	$("#searchBox").val(filter);
	if (filter)
		$("#searchButton").removeClass("fa-search").addClass("fa-remove");

	var ca_sortIcon = $.cookie("ca_sortIcon");
	enableIcon("#sortIcon",ca_sortIcon);
	post({action:"getSortOrder"},function(sortOrder) {
		$(".sortIcons").removeClass("enabledIcon");
		$(".sortIcons").each(function() {
			if ( ($(this).attr("data-sortBy") == sortOrder.sortBy) && ($(this).attr("data-sortDir") == sortOrder.sortDir) ) {
				$(this).addClass("enabledIcon");
				var classList = $(this).attr('class').split(/\s+/);
				$.each(classList, function(index, item) {
					if ( item.startsWith("fa-") ) {
						$("#sortIcon").html("&nbsp;<span class="+item+"></span>");
					}
				});
			}
		});
	});
	populateAutoComplete();
}

function disableSearch() {
	$("#searchBox").prop("disabled",true);
}

function enableSearch() {
	$("#searchBox").prop("disabled",false);
}

function evaluateBoolean(str) {
	regex=/^\s*(true|1|on)\s*$/i
	return regex.test(str);
}

function cookiesEnabled() {
	return evaluateBoolean(navigator.cookieEnabled);
}

function showCredits() {
	$(".multi_installDiv,.dockerSearch").hide();
	clearCategory(); clearSearchBox();
	var credits = $('#caCredits').html();
	updateDisplay(credits);
}

function showStatistics() {
	$(".multi_installDiv,.dockerSearch").hide();
	clearCategory(); clearSearchBox();
	post({action:'statistics'},function(result) {
		updateDisplay(result.statistics);
	});
}

function caChangeLog() {
	$(".multi_installDiv,.dockerSearch").hide();
	clearCategory(); clearSearchBox();
	post({action:'caChangeLog'},function(result) {
		updateDisplay(result.changelog);
	});
}

function scrollToTop() {
	$('html,body').animate({scrollTop:0},0);
}

function addDockerWarning(enableDisable) {
	if (enableDisable) {
		if ( dockerWarningAdded === false) {
			dockerWarningAdded = addBannerWarning("<?tr('Docker Service Not Enabled - Only Plugins Available To Be Installed Or Managed')?>",true,false);
		}
	} else {
		if ( dockerWarningAdded !== false ) {
			removeBannerWarning(dockerWarningAdded);
			dockerWarningAdded = false;
		}
	}
}

String.prototype.escapeHTML = function() {
	return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
}

function post(options,callback) {
	var URL = "/plugins/<?=$plugin?>/include/exec.php";

	if ( typeof options === "function" ) {
		callback = options;
	} else {
		<? if ( $cfg['debugging'] == "yes" ):?>
			var msg = postCount > 0 ? "Embedded Post: " : "Post: ";
			console.log(msg+JSON.stringify(options));
		<?endif;?>
	}

	if ( postCount == 0 && ! options.noSpinner ) {
		mySpinner();
	}
	postCount++;
	<? if ( $cfg['debugging'] == "yes" ):?>
		console.log("Post Count: "+postCount);
	<?endif;?>
	if ( typeof callback === "function" ) {
		$.post(URL,options,function(retval){
			try {
				var result = JSON.parse(retval);
				if (result.error) {
					alert(result.error);
				}
			} catch(e) {
				myCloseAlert();
				myCloseSpinner();
				if ( ! $.trim(retval) ) {
					retval = "<?tr("No data was returned.  It is probable that another browser session has rebooted your server.  Reloading this browser tab will probably fix this error")?>";
				}
				if ( retval.indexOf("<!DOCTYPE html>") === 0 ) {
					myCloseSpinner();
					myCloseAlert();
					alert("<?tr("You have been logged out")?>");
					window.location.reload();
				}	else {
					$("#templates_content").html(sprintf(tr("Something really wrong went on during %s"),options.action)+"<br><?tr("Post the ENTIRE contents of this message in the Community Applications Support Thread")?><br><br>"+retval.escapeHTML());
					throw new Error("Something went badly wrong!");
				}
			}
			<? if ( $cfg['debugging'] == "yes" ):?>
				console.groupCollapsed("Result "+options.action);
				console.log(result);
				console.groupEnd();
			<?endif;?>
			try {
				eval(callback(result));
			} catch(e) {
				post({action:'javascriptError',postCall:options.action,retval:result});
				alert("Fatal error during "+options.action+" "+e);
			}			
			if (result.script) {
				try {
					eval(result.script);
				} catch(e) {
					alert("Could not execute Script "+e);
				}
			}
			postCount--;
			if (postCount < 0) postCount = 0;
			if ( postCount == 0 && ! options.noSpinner) {
				myCloseSpinner();
			}
		});
	} else {
		$.post(URL,options);
		postCount--;
		if ( postCount < 0 ) postCount = 0;
		if ( postCount == 0) {
			myCloseSpinner();
		}
	}
	if ( ! cookiesEnabled() ) {
		if ( cookieWarning === false) {
			cookieWarning = addBannerWarning("<?tr("Community Applications works best when cookies are enabled in your browser.  Certain features may not be available.")?>");
		}
	} else {
		if ( cookieWarning !== false ) {
			removeBannerWarning(cookieWarning);
			cookieWarning = false;
		}
	}
}

function setFavRepoSearch() {
	post({action:'getFavourite'},function(result) {
		if (result.favourite) {
			$(".favouriteRepo").addClass("caMenuEnabled").removeClass("caMenuDisabled");
		} else {
			$(".favouriteRepo").addClass("caMenuDisabled").removeClass("caMenuEnabled");
		}
		$(".favouriteRepo").attr("data-repository",result.favourite);
	});
}

function getCategories() {
	post({action:'get_categories'},function(result) {
		$("#category_list").html(result.categories);
		$(".caMenuItem").each(function() {
			if ( ! ( $(this).hasClass("favouriteRepo") || $(this).hasClass("caPinnedMenu") ) ) {
				$(this).addClass("caMenuEnabled").removeClass("caMenuDisabled");
			}
		});
		$(".clearSearch").removeClass("caMenuEnabled").addClass("caMenuDisabled");
		setFavRepoSearch();

		post({action:'areAppsPinned'},function(result) {
			if (!result.status) {
				$(".caPinnedMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
			} else {
				$(".caPinnedMenu").removeClass("caMenuDisabled").addClass("caMenuEnabled");
			}
		});

		restoreStateMenu = $.cookie("ca_selectedMenu");
		if ( ! restoreStateMenu )
			restoreStateMenu = $.cookie("ca_startupButton");

		<? if ( $cfg['debugging'] == "yes" ):?>
			console.log(restoreStateMenu);
		<?endif;?>
		var menuItem = $.find(".caMenuItem[data-category='"+restoreStateMenu+"']");
		$(".caMenuItem").each(function(){
			$(this).removeClass("selectedMenu");
		});
		$(menuItem).addClass("selectedMenu");
		$(menuItem).parent().show();
		$(menuItem).next().show();
		restoreStateMenu = false;

		if ( $("#searchBox").val() ) {
			post({action:'getCategoriesPresent'},function(result) {
				$(".categoryMenu").removeClass("caMenuEnabled").addClass("caMenuDisabled");
				result.forEach(function(category) {
					var menuItem = $.find(".caMenuItem[data-category='"+category+"']");
					$(menuItem).removeClass("caMenuDisabled").addClass("caMenuEnabled");
					document.referrer = "/Apps";
				});
				var selectedMenu = $.cookie("ca_selectedMenu");
				if ( selectedMenu ) {
					var menuItem = $.find(".caMenuItem[data-category='"+selectedMenu+"']");
					$(menuItem).addClass("selectedMenu");
				}	else
					$(".allApps").addClass("selectedMenu");

			});
			if ($("#searchBox").val() ) {
				$(".clearSearch").removeClass("caMenuDisabled").addClass("caMenuEnabled");
			} else {
				$(".clearSearch").removeClass("caMenuEnabled").addClass("caMenuDisabled");
			}
		}
	});
}

function feedWarning(currentServer) {
	if ( currentServer != "Primary Server" ) {
		if ( currentServer == "" ) {
			addBannerWarning("<?tr("Unknown error happened.  Please post a screenshot in the support thread of the Statistics screen")?>");
		} else {
				if ( !backupServerWarning ) {
				backupServerWarning = addBannerWarning("<?tr("Backup Server Active.  Some icons may not appear, and plugin installations may be affected")?>",true,true);
			} else {
				removeBannerWarning(backupServerWarning);
				backupServerWarning = false;
			}
		}
	} else if ( backupServerWarning ) {
		removeBannerWarning(backupServerWarning);
		backupServerWarning = false;
	}
}

function tr(string) {
	<?if ( $translations && ! ($_SESSION['locale'] == "" || $_SESSION['locale'] == "en_US") ) : ?>
		return _(string);
	<?else: ?>
		return string;
	<?endif;?>
}

function CAswitchLanguage(language) {
	if ( language == "en_US" || ! language)
		var oldlanguage = '<?=$locale?>';
	else
		var oldlanguage = "";

	data.searchActive = true; // so the system doesn't resort
	saveState();
	$.cookie('locale',oldlanguage,{path:'/'}); // save the previous locale
	post({action:'switchLanguage',language:language},function(result) {
		$.cookie("ca_languageSwitch","switched",{expires:365,path:'/'});
		myCloseSpinner();
		window.location.reload();
	});
}
function installLanguage(languageURL,language,popup=false) {
	if ( ! popup && popupVisible() ) return;
	$(".tooltipstered").tooltipster("hide");

	disableSearch();
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=install&arg2='+languageURL,"<?tr('Install Language Pack')?>",600,900,true,"refreshDisplay");
}

function updateLanguage(language) {
	$(".tooltipstered").tooltipster("hide");

	disableSearch();
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=update&arg2='+language,"<?tr('Update Language Pack')?>",600,900,true,"refreshDisplay");
}
function removeLanguage(language) {
	openBox('/plugins/community.applications/scripts/languageInstall.sh&arg1=remove&arg2='+language,"<?tr('Remove Language Pack')?>",600,900,true,"refreshDisplay");
}

function setToolTipForFavourite() {
	$(".ca_fav").each(function(){
		if ( $(this).hasClass("ca_favouriteRepo") ) {
			$(this).attr("title","<?tr("Click to remove favourite repository");?>");
		} else {
			var repository = $(this).data("repository");
			repository = repository.replace("'s Repository","").replace("' Repository","").replace(" Repository","");
			$(this).attr("title",sprintf("Click to set %s as favourite repository",repository));
		}
	});
}

function setFavourite(button) {
	$(".ca_fav").removeClass("ca_favouriteRepo").addClass("ca_non_favouriteRepo");
	var repo = $(button).data("repository");
	var apps = $.find('.ca_non_favouriteRepo[data-repository="'+repo+'"]');
	$(apps).removeClass("ca_non_favouriteRepo").addClass("ca_favouriteRepo");
	var apps = $.find('.ca_holder[data-repository="'+repo+'"]');
	$(".ca_holder").removeClass("ca_holderFav");
	$(apps).addClass("ca_holderFav");
	setToolTipForFavourite();
	clearTimeout(repoBannerTimer);
	post({action:'toggleFavourite',repository:repo},function(data) {
		if ( repoBanner !== false ) {
			removeBannerWarning(repoBanner);
		}
		var bannerMessage = repo.replace("'s Repository","").replace("' Repository","").replace(" Repository","");
		repoBanner = addBannerWarning(sprintf("%s set as favourite repository",bannerMessage),false,true);
		repoBannerTimer = setTimeout(function(){
			removeBannerWarning(repoBanner);
			repoBanner = false;
		},5000);
		setFavRepoSearch();
	});
	setFavRepoSearch();
}

function popUpChart(descData,appnumber) {
	if ( $("#trendChart"+appnumber).length ) {
		var fontSize = 14;

		if (descData.trendLabel.length > 3) {
			var fontSize = 12;
		}
		if (descData.trendLabel.length > 6) {
			var fontSize = 11;
		}
		if (descData.trendLabel.length > 8) {
			var fontSize = 8;
		}

		var ctx = document.getElementById("trendChart"+appnumber).getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.trendData,
					borderColor: '#FF8C2F',
					trendlineLinear: {
						style: "rgb(255 ,66 ,255)",
						lineStyle: "dotted",
						width: 2
					}
				}],
				labels: descData.trendLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString()+"%";
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Trend Per Month");?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>'
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						ticks: {
							callback: function(label,index,labels) {
								return label + " %";
							},
							precision: 0,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}]
				}
			}
		});
	}
	if ( $("#downloadChart"+appnumber).length ) {
		var ctx = document.getElementById("downloadChart"+appnumber).getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.downloadtrend,
					borderColor: '#FF8C2F',
					trendlineLinear: {
						style: "rgb(255 ,66 ,255)",
						lineStyle: "dotted",
						width: 2
					}
				}],
				labels: descData.downloadLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString();
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Downloads Per Month")?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>'
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						ticks: {
							callback: function(label,index,labels) {
								return label.toLocaleString();
							},
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}]
				}
			}
		});
	}
	if ( $("#totalDownloadChart"+appnumber).length ) {
		var ctx = document.getElementById("totalDownloadChart"+appnumber).getContext('2d');
		let chart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					data: descData.totaldown,
					borderColor: '#FF8C2F'
				}],
				labels: descData.totaldownLabel
			},
			options: {
				tooltips: {
					callbacks: {
						label: function(tooltipItem,data) {
							return tooltipItem.yLabel.toLocaleString();
						}
					}
				},
				title: {
					display: true,
					text: "<?tr("Total Downloads");?>",
					fontSize: 16,
					fontColor: '<?=$tooltipsterContent?>'
				},
				legend: {
					display: false
				},
				events: ["mousemove","mouseout"],
				scales: {
					yAxes: [{
						ticks: {
							callback: function(label,index,labels) {
								return label.toLocaleString();
							},
							fontColor: '<?=$tooltipsterContent?>'
						}
					}],
					xAxes: [{
						ticks: {
							fontSize: fontSize,
							fontColor: '<?=$tooltipsterContent?>'
						}
					}]
				}
			}
		});
	}
}

</script>

> <span class='caHelpIconSpacing'><i class='fa fa-sort-alpha-asc enabledIcon' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("This chooses how to sort the results");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-download' aria-hidden='true' style='font-size:2rem;'></i> <i class='fa fa-edit' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("These icons respectively will **Install or Edit** an application");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-globe' aria-hidden='true' style='font-size:2rem;'></i> <i class='fa fa-cog' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("Clicking these icons will take you to an application's GUI or settings");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-cloud-download' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("This will update an application");?><br>
> <span class='caHelpIconSpacing'><span class='ca_fa-switchto' style='font-size:2rem;'></span></span><?tr("This will immediately switch to the language");?><br>
> <span class='caHelpIconSpacing'><span class='ca_fa-support' style='font-size:2rem;'></span></span><?tr("This will take you to the appropriate support thread for an application");?><br>
> <span class='caHelpIconSpacing'><span class='ca_fa-project' style='font-size:2rem;'></span></span><?tr("This will take you to the project page for an application");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-window-close' aria-hidden='true' style='font-size:2rem;color:maroon;'></i></span><?tr("Clicking this icon will uninstall the application or delete it from the lists depending upon your current section");?><br>
> <span class='caHelpIconSpacing'><span class='unpinned'> </span><span class='pinned'></span></span><?tr("Clicking these icons will pin or unpin an application for later viewer from the Pinned Apps section");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-info-circle' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("Clicking this will display more information about the application.  NOTE: You can also click on the application's icon to display more information.");?><br>
> <span class='caHelpIconSpacing'><i class='fa fa-exclamation-triangle' aria-hidden='true' style='font-size:2rem;'></i></span><?tr("Clicking this will display any warnings or extra comments about the application");?><br>
> <span class='caHelpIconSpacing'><input type='checkbox' checked></span><?tr("On the previous apps section you can select multiple applications to install simultaneously");?><br>
> <span class='caHelpIconSpacing'><span class='ca_non_favouriteRepo' style='font-size:2rem;'></span></span><?tr("This sets a favourite repository which will appear first in any search result");?><br>
> <center><?tr("For support for this plugin visit");?> <a href='https://lime-technology.com/forums/topic/38582-plug-in-community-applications/' target='_blank'><?tr("Click here");?></a></center>
>
> <?tr("To view the policies Community Applications has");?> <a href='https://forums.unraid.net/topic/87144-ca-application-policies/' target='_blank'><?tr("Click here");?></a>


<?include "/usr/local/emhttp/plugins/$plugin/skins/Narrow/skin.html"?>
